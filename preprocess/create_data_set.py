# -*- coding: utf-8 -*-
"""create_data_set.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Sh7VQCwkKTK197OEBtSH9gUPvy7ZPdLe
"""

import pandas as pd
from pyhealth.medcode import CrossMap, InnerMap
import pandas as pd

# Function to read the patient CSV file
def read_patient():
    return pd.read_csv("/content/PATIENTS.csv")

# Function to read the visit CSV file
def read_visit():
    return pd.read_csv('/content/ADMISSIONS.csv')

# Function to read the ICD_DIAGNOSES dictionary CSV file
def read_icd9_code():
    return pd.read_csv('/content/D_ICD_DIAGNOSES.csv')

# Function to read the diagnosis CSV file
def read_diagnosis():
    return pd.read_csv("/content/DIAGNOSES_ICD.csv")

# Function to read the medication CSV file
def read_medication():
    return pd.read_csv("/content/PRESCRIPTIONS.csv", low_memory=False)

# Function to preprocess the patient dataframe
def preprocess_patient(df):
    selected_columns = ['SUBJECT_ID','DOB','DOD']
    return df[selected_columns].copy()

# Function to preprocess the visit dataframe
def preprocess_visit(df):
    selected_columns = ['SUBJECT_ID','HADM_ID','ADMITTIME','DISCHTIME','DEATHTIME']
    return df[selected_columns].copy()

# Function to preprocess the diagnosis dataframe
def preprocess_diagnosis(df):
    selected_columns = ['SUBJECT_ID','HADM_ID','ICD9_CODE']
    return df[selected_columns].copy()

# Function to preprocess the medication dataframe
def preprocess_medication(df):
    selected_columns = ['SUBJECT_ID','HADM_ID','STARTDATE','ENDDATE','DRUG_TYPE','DRUG']
    return df[selected_columns].copy()

## read data set

patient_raw = read_patient()
patient_df = preprocess_patient(patient_raw)

visit_raw = read_visit()
visit_df = preprocess_visit(visit_raw)

diagnosis_raw = read_diagnosis()
diagnosis_df = preprocess_diagnosis(diagnosis_raw)

medication_raw = read_medication()
medication_df = preprocess_medication(medication_raw)

## create ICD9 token2index

icd9cm = InnerMap.load("ICD9CM")

icd9_code_dictionary = read_icd9_code()

ancestors = list(set([j for i in icd9_code_dictionary['ICD9_CODE'] for j in icd9cm.get_ancestors(i) if '.' not in j]))
icd9_token2index = {ancestors[i] : i for i in range(len(ancestors))}

def icd9_ancestor(row):
  row = str(row)
  if len(row) == 0 or row not in icd9cm:
    return row
  df_ancestors = [i for i in icd9cm.get_ancestors(row) if '.' not in i]
  return df_ancestors[0] if len(df_ancestors) > 0 else df_ancestors

def icd9_mapping(row):
  if len(row) == 0 or row not in ancestors:
    return row
  return icd9_token2index[str(row)]

# Add Age
patient_df['DOB'] = pd.to_datetime(patient_df['DOB']).dt.date
visit_df['ADMITTIME'] = pd.to_datetime(visit_df['ADMITTIME']).dt.date
df = visit_df.merge(patient_df, on='SUBJECT_ID')
df = df.merge(diagnosis_df, on=['SUBJECT_ID', 'HADM_ID'])
df['AGE'] = (df['ADMITTIME'] - df['DOB']).apply(lambda x: int(x.days/365))
subject_id_counts = df.groupby('SUBJECT_ID')['ADMITTIME'].nunique()
# filter out the patient with less than 2 visits
valid_subject_ids = subject_id_counts[subject_id_counts > 1].index
df = df[df['SUBJECT_ID'].isin(valid_subject_ids)].copy()

# Add ICD9_CODE
df['ICD9_CODE_ANCESTOR'] = df['ICD9_CODE'].apply(icd9_ancestor)
df['ICD9_CODE_ANCESTOR_INDEX'] = df['ICD9_CODE_ANCESTOR'].apply(icd9_mapping)

index = [False if isinstance(i, list) else True for i in df['ICD9_CODE_ANCESTOR_INDEX']]
df = df.iloc[index]
df = df.reset_index(drop = True)

# group by date
diagnoses = df.sort_values(by=['SUBJECT_ID', 'ADMITTIME'])
diagnoses_grouped = diagnoses.groupby(['SUBJECT_ID', 'ADMITTIME']).agg({'ICD9_CODE_ANCESTOR_INDEX': list, 'AGE': list, 'DOB': 'first'}).reset_index()
diagnoses_grouped.columns = ['SUBJECT_ID', 'ADMITTIME', 'ICD9_CODE', 'AGE', 'DOB']

diagnoses_grouped.head(20)